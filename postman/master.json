{
	"info": {
		"_postman_id": "a1b54bb5-5d40-4749-80ad-97cecf58e4da",
		"name": "Master",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34715871",
		"_collection_link": "https://crimson-sunset-793491.postman.co/workspace/Natour~45be223a-1410-42a1-9bf6-e97727dc2ce0/collection/34715871-a1b54bb5-5d40-4749-80ad-97cecf58e4da?action=share&source=collection_link&creator=34715871"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Listar usuários✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}users/list/?page=1",
							"host": [
								"{{apiUrl}}users"
							],
							"path": [
								"list",
								""
							],
							"query": [
								{
									"key": "username",
									"value": "N",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "## Get User List\n\nThis endpoint retrieves a list of users from the system. It is a `GET` request and does not require any request parameters.\n\n### Request\n\n- **Method:** GET\n    \n- **URL:** `http://127.0.0.1:8000/users/list/`\n    \n\n### Response\n\nThe expected response is a JSON object containing an array of user objects. Each user object may include various fields such as:\n\n- `id`: Unique identifier for the user.\n    \n- `name`: The name of the user.\n    \n- `email`: The email address of the user.\n    \n- Additional user-related attributes may also be included.\n    \n\n### Notes\n\n- Ensure that you have the necessary permissions to access the user list.\n    \n- The response may vary based on the current users in the database."
					},
					"response": []
				},
				{
					"name": "Deletar usuário✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}users/3/delete/",
							"host": [
								"{{apiUrl}}users"
							],
							"path": [
								"3",
								"delete",
								""
							]
						},
						"description": "# Delete User Account\n\nThis endpoint allows authenticated users to delete their own user account from the system.\n\n## Request\n\n- **Method**: DELETE\n    \n- **URL**: `http://127.0.0.1:8000/users/me/delete/`\n    \n\n### Request Parameters\n\nThis endpoint does not require any additional request parameters in the body. However, ensure that the user is authenticated and has the necessary permissions to perform this action.\n\n## Response\n\nUpon a successful account deletion, the server will respond with a status code indicating the result of the operation.\n\n### Expected Response\n\n- **Status Code**: `204 No Content`\n    \n    - Indicates that the user account has been successfully deleted.\n        \n- **Error Responses**:\n    \n    - `403 Forbidden`: If the user is not authorized to delete the account.\n        \n    - `404 Not Found`: If the user account does not exist.\n        \n\n## Notes\n\n- This action is irreversible; once the account is deleted, all associated data will be permanently removed.\n    \n- Ensure that you have backed up any important information before proceeding with the deletion."
					},
					"response": []
				},
				{
					"name": "Pontos do usuário✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}users/1/points/",
							"host": [
								"{{apiUrl}}users"
							],
							"path": [
								"1",
								"points",
								""
							]
						},
						"description": "## Get User List\n\nThis endpoint retrieves a list of users from the system. It is a `GET` request and does not require any request parameters.\n\n### Request\n\n- **Method:** GET\n    \n- **URL:** `http://127.0.0.1:8000/users/list/`\n    \n\n### Response\n\nThe expected response is a JSON object containing an array of user objects. Each user object may include various fields such as:\n\n- `id`: Unique identifier for the user.\n    \n- `name`: The name of the user.\n    \n- `email`: The email address of the user.\n    \n- Additional user-related attributes may also be included.\n    \n\n### Notes\n\n- Ensure that you have the necessary permissions to access the user list.\n    \n- The response may vary based on the current users in the database."
					},
					"response": []
				},
				{
					"name": "Alterar Status✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deactivation_reason\": \"a\"\r\n}\r\n// se nao passara nada no body ele ativa o usuário",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}users/2/status/",
							"host": [
								"{{apiUrl}}users"
							],
							"path": [
								"2",
								"status",
								""
							]
						},
						"description": "### Update User Status\n\nThis endpoint allows you to update the status of a specific user identified by their unique ID. The request modifies the user's current status information.\n\n#### Request Parameters\n\nThe request must be sent as a JSON object in the body. The following parameters are expected:\n\n- **status** (string): The new status to be assigned to the user. This parameter is required.\n    \n\n#### Response Structure\n\nUpon a successful update, the server will return a JSON object containing the following information:\n\n- **id** (integer): The ID of the user whose status has been updated.\n    \n- **status** (string): The updated status of the user.\n    \n- **message** (string): A confirmation message indicating the status has been successfully updated.\n    \n\n#### Example Request\n\n``` http\nPUT /users/23/status/\nContent-Type: application/json\n{\n    \"status\": \"active\"\n}\n\n ```\n\n#### Example Response\n\n``` json\n{\n    \"id\": 23,\n    \"status\": \"active\",\n    \"message\": \"User status updated successfully.\"\n}\n\n ```\n\nMake sure to replace the user ID in the URL with the appropriate ID of the user whose status you wish to update."
					},
					"response": []
				},
				{
					"name": "Resetar senha✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}users/1/update/password/",
							"host": [
								"{{apiUrl}}users"
							],
							"path": [
								"1",
								"update",
								"password",
								""
							]
						},
						"description": "### Update User Status\n\nThis endpoint allows you to update the status of a specific user identified by their unique ID. The request modifies the user's current status information.\n\n#### Request Parameters\n\nThe request must be sent as a JSON object in the body. The following parameters are expected:\n\n- **status** (string): The new status to be assigned to the user. This parameter is required.\n    \n\n#### Response Structure\n\nUpon a successful update, the server will return a JSON object containing the following information:\n\n- **id** (integer): The ID of the user whose status has been updated.\n    \n- **status** (string): The updated status of the user.\n    \n- **message** (string): A confirmation message indicating the status has been successfully updated.\n    \n\n#### Example Request\n\n``` http\nPUT /users/23/status/\nContent-Type: application/json\n{\n    \"status\": \"active\"\n}\n\n ```\n\n#### Example Response\n\n``` json\n{\n    \"id\": 23,\n    \"status\": \"active\",\n    \"message\": \"User status updated successfully.\"\n}\n\n ```\n\nMake sure to replace the user ID in the URL with the appropriate ID of the user whose status you wish to update."
					},
					"response": []
				}
			]
		},
		{
			"name": "Termos",
			"item": [
				{
					"name": "Mostrar Termos/Política✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}terms/1/",
							"host": [
								"{{apiUrl}}terms"
							],
							"path": [
								"1",
								""
							]
						},
						"description": "## API Endpoint: Retrieve Terms\n\n### Description\n\nThis endpoint retrieves the details of a specific term based on the provided term ID. It is useful for fetching information about a term in the system, which may include definitions, usage examples, and related information.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `http://127.0.0.1:8000/terms/{id}/`\n    \n- **Path Parameter**:\n    \n    - `id` (integer): The unique identifier for the term you wish to retrieve. In this example, the term ID is `1`.\n        \n\n### Response\n\nThe response will contain the details of the requested term in a structured format. The expected structure of the response includes:\n\n- `id`: The unique identifier of the term.\n    \n- `name`: The name of the term.\n    \n- `definition`: A detailed explanation of the term.\n    \n- `examples`: A list of usage examples for the term.\n    \n- `related_terms`: A list of terms that are related to the requested term.\n    \n\n### Example Response Structure\n\n``` json\n{\n  \"id\": 1,\n  \"name\": \"Sample Term\",\n  \"definition\": \"This is a sample definition of the term.\",\n  \"examples\": [\n    \"Example usage of the term in a sentence.\"\n  ],\n  \"related_terms\": [\n    \"Related Term 1\",\n    \"Related Term 2\"\n  ]\n}\n\n ```\n\nThis endpoint is essential for applications that require term information for display or processing."
					},
					"response": []
				},
				{
					"name": "Criar termos✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Política 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}terms/create/",
							"host": [
								"{{apiUrl}}terms"
							],
							"path": [
								"create",
								""
							]
						},
						"description": "## Create Terms Endpoint\n\nThis endpoint allows users to create new terms by submitting a POST request.\n\n### Request Method\n\n- **POST**\n    \n\n### Endpoint\n\n- **URL:** `http://127.0.0.1:8000/terms/create/`\n    \n\n### Request Body\n\nThe request must include a JSON payload with the following parameter:\n\n- **content** (string): A description of the term being created. This parameter is required.\n    \n\n**Example:**\n\n``` json\n{\n  \"content\": \"Política 2\"\n}\n\n ```\n\n### Expected Response Format\n\nUpon successful creation of a term, the server will respond with a confirmation message or the details of the created term. The response will typically be in JSON format.\n\n### Notes\n\nEnsure that the content provided is relevant and adheres to any validation rules set by the server."
					},
					"response": []
				},
				{
					"name": "Editar Termos/Política✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Xermos Exitadox\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}terms/1/update/",
							"host": [
								"{{apiUrl}}terms"
							],
							"path": [
								"1",
								"update",
								""
							]
						},
						"description": "### Update Terms\n\nThis endpoint allows you to update an existing term in the system. The specific term to be updated is identified by its unique ID in the URL.\n\n#### Request\n\n- **Method**: PUT\n    \n- **URL**: `http://127.0.0.1:8000/terms/1/update/`\n    \n\n#### Request Body\n\nThe request body must be in JSON format and should include the following parameter:\n\n- **content** (string): The new content for the term. This is a required field that specifies the updated text for the term.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"content\": \"Xermos Exitadox\"\n}\n\n ```\n\n#### Response\n\nUpon a successful update, the server will respond with a confirmation of the update. The expected response will typically include:\n\n- A success message indicating that the term has been updated.\n    \n- The updated term details, which may include the term ID and the new content.\n    \n\n#### Notes\n\n- Ensure that the term ID in the URL corresponds to an existing term in the database.\n    \n- The content provided must meet any validation criteria set by the server (e.g., length, format).\n    \n- This operation is idempotent; sending the same request multiple times will yield the same result.\n    \n\nUse this endpoint to keep your terms up to date with the latest information."
					},
					"response": []
				}
			]
		},
		{
			"name": "Pontos",
			"item": [
				{
					"name": "IDs fotos✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}photos/?point_id=2",
							"host": [
								"{{apiUrl}}photos"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "point_id",
									"value": "2"
								}
							]
						},
						"description": "## Get Photos by User ID\n\nThis endpoint retrieves a list of photos associated with a specific user identified by their `user_id`.\n\n### Request Parameters\n\n- **user_id** (query parameter, required): The unique identifier of the user whose photos you want to retrieve. This should be a numeric value.\n    \n\n### Example Request\n\n```\nGET http://127.0.0.1:8000/photos/?user_id=2\n\n ```\n\n### Expected Response\n\nOn a successful request, the server will return a JSON array containing the photos related to the specified user. Each photo object in the response may include details such as photo ID, title, URL, and other relevant metadata.\n\n### Notes\n\n- Ensure that the `user_id` provided corresponds to an existing user in the system to receive valid results.\n    \n- If the `user_id` does not exist or if there are no photos associated with the user, the response may return an empty array or an appropriate error message."
					},
					"response": []
				},
				{
					"name": "Apagar Ponto✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}points/2/delete/",
							"host": [
								"{{apiUrl}}points"
							],
							"path": [
								"2",
								"delete",
								""
							]
						},
						"description": "# Delete User Account\n\nThis endpoint allows authenticated users to delete their own user account from the system.\n\n## Request\n\n- **Method**: DELETE\n    \n- **URL**: `http://127.0.0.1:8000/users/me/delete/`\n    \n\n### Request Parameters\n\nThis endpoint does not require any additional request parameters in the body. However, ensure that the user is authenticated and has the necessary permissions to perform this action.\n\n## Response\n\nUpon a successful account deletion, the server will respond with a status code indicating the result of the operation.\n\n### Expected Response\n\n- **Status Code**: `204 No Content`\n    \n    - Indicates that the user account has been successfully deleted.\n        \n- **Error Responses**:\n    \n    - `403 Forbidden`: If the user is not authorized to delete the account.\n        \n    - `404 Not Found`: If the user account does not exist.\n        \n\n## Notes\n\n- This action is irreversible; once the account is deleted, all associated data will be permanently removed.\n    \n- Ensure that you have backed up any important information before proceeding with the deletion."
					},
					"response": []
				},
				{
					"name": "Detalhes Ponto✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}points/2/",
							"host": [
								"{{apiUrl}}points"
							],
							"path": [
								"2",
								""
							]
						},
						"description": "## Create User Endpoint\n\nThis endpoint allows you to create a new user in the system. It accepts user details such as username, email, role, and password, and returns the created user's information.\n\n### Request\n\n**Method:** POST  \n**URL:** `http://127.0.0.1:8000/users/create/`\n\n#### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **username** (string): The desired username for the new user.\n    \n- **email** (string): The email address of the new user.\n    \n- **role** (integer): The role identifier for the user (e.g., 1 for admin, 2 for regular user).\n    \n- **password** (string): The password for the new user. It should meet security requirements (e.g., minimum length, complexity).\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"username\": \"JohnDoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": 2,\n  \"password\": \"Aa12345678!\"\n}\n\n ```\n\n### Response\n\nUpon successful creation of the user, the server will respond with a JSON object containing the details of the created user. The structure of the response typically includes:\n\n- **id** (integer): The unique identifier of the newly created user.\n    \n- **username** (string): The username of the created user.\n    \n- **email** (string): The email address of the created user.\n    \n- **role** (integer): The role identifier of the created user.\n    \n\n**Example Response:**\n\n``` json\n{\n  \"id\": 1,\n  \"username\": \"JohnDoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": 2\n}\n\n ```\n\n### Notes\n\n- Ensure that the username and email are unique and not already in use.\n    \n- The password should comply with the security policies set by the application.\n    \n\nThis endpoint is essential for user management and should be used to register new users in the system."
					},
					"response": []
				},
				{
					"name": "Aprovar/Recusar Ponto✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": true,\r\n    \"is_active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}points/2/approve/",
							"host": [
								"{{apiUrl}}points"
							],
							"path": [
								"2",
								"approve",
								""
							]
						},
						"description": "## Create User Endpoint\n\nThis endpoint allows you to create a new user in the system. It accepts user details such as username, email, role, and password, and returns the created user's information.\n\n### Request\n\n**Method:** POST  \n**URL:** `http://127.0.0.1:8000/users/create/`\n\n#### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **username** (string): The desired username for the new user.\n    \n- **email** (string): The email address of the new user.\n    \n- **role** (integer): The role identifier for the user (e.g., 1 for admin, 2 for regular user).\n    \n- **password** (string): The password for the new user. It should meet security requirements (e.g., minimum length, complexity).\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"username\": \"JohnDoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": 2,\n  \"password\": \"Aa12345678!\"\n}\n\n ```\n\n### Response\n\nUpon successful creation of the user, the server will respond with a JSON object containing the details of the created user. The structure of the response typically includes:\n\n- **id** (integer): The unique identifier of the newly created user.\n    \n- **username** (string): The username of the created user.\n    \n- **email** (string): The email address of the created user.\n    \n- **role** (integer): The role identifier of the created user.\n    \n\n**Example Response:**\n\n``` json\n{\n  \"id\": 1,\n  \"username\": \"JohnDoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": 2\n}\n\n ```\n\n### Notes\n\n- Ensure that the username and email are unique and not already in use.\n    \n- The password should comply with the security policies set by the application.\n    \n\nThis endpoint is essential for user management and should be used to register new users in the system."
					},
					"response": []
				},
				{
					"name": "Listar Pontos✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}points/?page=1&status=true",
							"host": [
								"{{apiUrl}}points"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "name",
									"value": "t",
									"disabled": true
								},
								{
									"key": "status",
									"value": "true",
									"description": "null | false | true"
								}
							]
						},
						"description": "## Create User Endpoint\n\nThis endpoint allows you to create a new user in the system. It accepts user details such as username, email, role, and password, and returns the created user's information.\n\n### Request\n\n**Method:** POST  \n**URL:** `http://127.0.0.1:8000/users/create/`\n\n#### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **username** (string): The desired username for the new user.\n    \n- **email** (string): The email address of the new user.\n    \n- **role** (integer): The role identifier for the user (e.g., 1 for admin, 2 for regular user).\n    \n- **password** (string): The password for the new user. It should meet security requirements (e.g., minimum length, complexity).\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"username\": \"JohnDoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": 2,\n  \"password\": \"Aa12345678!\"\n}\n\n ```\n\n### Response\n\nUpon successful creation of the user, the server will respond with a JSON object containing the details of the created user. The structure of the response typically includes:\n\n- **id** (integer): The unique identifier of the newly created user.\n    \n- **username** (string): The username of the created user.\n    \n- **email** (string): The email address of the created user.\n    \n- **role** (integer): The role identifier of the created user.\n    \n\n**Example Response:**\n\n``` json\n{\n  \"id\": 1,\n  \"username\": \"JohnDoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": 2\n}\n\n ```\n\n### Notes\n\n- Ensure that the username and email are unique and not already in use.\n    \n- The password should comply with the security policies set by the application.\n    \n\nThis endpoint is essential for user management and should be used to register new users in the system."
					},
					"response": []
				},
				{
					"name": "Alterar Status Master✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deactivation_reason\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}points/2/status/",
							"host": [
								"{{apiUrl}}points"
							],
							"path": [
								"2",
								"status",
								""
							]
						},
						"description": "### Update User Status\n\nThis endpoint allows you to update the status of a specific user identified by their unique ID. The request modifies the user's current status information.\n\n#### Request Parameters\n\nThe request must be sent as a JSON object in the body. The following parameters are expected:\n\n- **status** (string): The new status to be assigned to the user. This parameter is required.\n    \n\n#### Response Structure\n\nUpon a successful update, the server will return a JSON object containing the following information:\n\n- **id** (integer): The ID of the user whose status has been updated.\n    \n- **status** (string): The updated status of the user.\n    \n- **message** (string): A confirmation message indicating the status has been successfully updated.\n    \n\n#### Example Request\n\n``` http\nPUT /users/23/status/\nContent-Type: application/json\n{\n    \"status\": \"active\"\n}\n\n ```\n\n#### Example Response\n\n``` json\n{\n    \"id\": 23,\n    \"status\": \"active\",\n    \"message\": \"User status updated successfully.\"\n}\n\n ```\n\nMake sure to replace the user ID in the URL with the appropriate ID of the user whose status you wish to update."
					},
					"response": []
				}
			]
		},
		{
			"name": "Avaliações",
			"item": [
				{
					"name": "Lista avaliações✅",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}points/reviews/?page=1",
							"host": [
								"{{apiUrl}}points"
							],
							"path": [
								"reviews",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login✅",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"const { access } = res;\r",
							"pm.environment.set('access', access); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"rogelio39@gmail.com\",\r\n    \"password\": \"Aa12345678!\",\r\n    \"remember_me\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiUrl}}users/login/",
					"host": [
						"{{apiUrl}}users"
					],
					"path": [
						"login",
						""
					]
				},
				"description": "## User Login API\n\nThis endpoint allows users to authenticate themselves by logging into their account.\n\n### Request Method\n\n- **POST**\n    \n\n### Endpoint\n\n- `http://127.0.0.1:8000/users/login/`\n    \n\n### Request Parameters\n\nThe request body must be a JSON object containing the following parameters:\n\n- **email** (string): The email address associated with the user account.\n    \n- **password** (string): The password for the user account.\n    \n\n### Example Request Body\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your_password\"\n}\n\n ```\n\n### Expected Response Format\n\nUpon successful login, the server will respond with a JSON object containing user authentication details, such as a token or user information. The exact structure of the response will depend on the implementation but typically includes:\n\n- **token** (string): A token that can be used for subsequent authenticated requests.\n    \n- **user** (object): An object containing user details such as ID, name, and email.\n    \n\n### Example Response\n\n``` json\n{\n  \"token\": \"your_auth_token\",\n  \"user\": {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"user@example.com\"\n  }\n}\n\n ```\n\n### Notes\n\nEnsure that the email and password are correctly formatted and valid for successful authentication."
			},
			"response": []
		},
		{
			"name": "Minhas informações✅",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}users/me/",
					"host": [
						"{{apiUrl}}users"
					],
					"path": [
						"me",
						""
					]
				},
				"description": "### GET /users/me/\n\nThis endpoint retrieves the details of the currently authenticated user. It is typically used to access user-specific information such as profile details, preferences, and settings.\n\n#### Request Parameters\n\nThis endpoint does not require any additional input parameters in the request.\n\n#### Response Structure\n\nThe response will contain a JSON object with the following fields:\n\n- **id**: Unique identifier for the user.\n    \n- **username**: The username of the user.\n    \n- **email**: The email address associated with the user account.\n    \n- **first_name**: The first name of the user.\n    \n- **last_name**: The last name of the user.\n    \n- **created_at**: Timestamp indicating when the user account was created.\n    \n- **updated_at**: Timestamp indicating when the user account details were last updated.\n    \n\n#### Example Response\n\n``` json\n{\n  \"id\": \"123\",\n  \"username\": \"exampleUser\",\n  \"email\": \"user@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"created_at\": \"2023-01-01T00:00:00Z\",\n  \"updated_at\": \"2023-01-02T00:00:00Z\"\n}\n\n ```\n\nThis endpoint is essential for applications that require user-specific data to customize the user experience."
			},
			"response": []
		}
	]
}